function initializeSimulator(e){window.simulatorData=e,currentStandings=JSON.parse(JSON.stringify(e.current_standings)),gameSelections={},renderGameSelections(),updateStandings(),generatePlayoffBracket()}function calculateAverageScore(e){const a=window.simulatorData.current_standings.find(a=>a.team_id===e);if(!a)return 0;const n=a.wins+a.losses;return 0===n?0:a.points_for/n}function autoCalculateScores(e,a){const n=calculateAverageScore(e),s=calculateAverageScore(a);let t,i=n;return t=s>n?Math.max(0,n-1):s,{winnerScore:parseFloat(i.toFixed(2)),loserScore:parseFloat(t.toFixed(2))}}function renderGameSelections(){const e=document.getElementById("game-selections"),a=window.simulatorData.remaining_games,n={};a.forEach((e,a)=>{n[e.week]||(n[e.week]=[]),n[e.week].push({...e,globalIdx:a})});let s="";Object.keys(n).sort((e,a)=>e-a).forEach(e=>{s+='<div class="week-section">',s+=`<div class="week-header">Week ${e}</div>`,n[e].forEach(e=>{const a=`w${e.week}_${e.globalIdx}`,n=gameSelections[a]||{};s+=`\n                <div class="game-card">\n                    <div class="matchup-container">\n                        <div class="team-card ${"away"===n.winner?"selected":""}" \n                             id="${a}_away_card"\n                             onclick="selectWinner('${a}', 'away', ${e.away_id}, ${e.home_id})">\n                            <div class="team-name">${e.away_team}</div>\n                            <div class="score-section">\n                                <div class="score-label">Score (Optional)</div>\n                                <input type="number" \n                                       class="score-input" \n                                       id="${a}_away_score"\n                                       placeholder="--"\n                                       step="0.01"\n                                       value="${n.away_score||""}"\n                                       onclick="event.stopPropagation()"\n                                       oninput="updateScore('${a}', 'away', this.value)">\n                            </div>\n                        </div>\n                        \n                        <div class="vs-divider">@</div>\n                        \n                        <div class="team-card ${"home"===n.winner?"selected":""}" \n                             id="${a}_home_card"\n                             onclick="selectWinner('${a}', 'home', ${e.home_id}, ${e.away_id})">\n                            <div class="location-badge">HOME</div>\n                            <div class="team-name">${e.home_team}</div>\n                            <div class="score-section">\n                                <div class="score-label">Score (Optional)</div>\n                                <input type="number" \n                                       class="score-input" \n                                       id="${a}_home_score"\n                                       placeholder="--"\n                                       step="0.01"\n                                       value="${n.home_score||""}"\n                                       onclick="event.stopPropagation()"\n                                       oninput="updateScore('${a}', 'home', this.value)">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `}),s+="</div>"}),e.innerHTML=s}function selectWinner(e,a,n,s){gameSelections[e]||(gameSelections[e]={}),gameSelections[e].winner=a,gameSelections[e].winner_id=n,gameSelections[e].loser_id=s;const t=autoCalculateScores(n,s);"away"===a?(gameSelections[e].away_score=t.winnerScore,gameSelections[e].home_score=t.loserScore):(gameSelections[e].home_score=t.winnerScore,gameSelections[e].away_score=t.loserScore);const i=document.getElementById(`${e}_away_card`),o=document.getElementById(`${e}_home_card`),c=document.getElementById(`${e}_away_score`),d=document.getElementById(`${e}_home_score`);i&&o&&(i.classList.remove("selected"),o.classList.remove("selected"),"away"===a?i.classList.add("selected"):o.classList.add("selected")),c&&(c.value=gameSelections[e].away_score||""),d&&(d.value=gameSelections[e].home_score||""),updateStandings(),generatePlayoffBracket()}function updateScore(e,a,n){gameSelections[e]||(gameSelections[e]={});const s=parseFloat(n)||null;"away"===a?gameSelections[e].away_score=s:gameSelections[e].home_score=s,gameSelections[e].winner&&(updateStandings(),generatePlayoffBracket())}function updateStandings(){currentStandings=JSON.parse(JSON.stringify(window.simulatorData.current_standings)),Object.keys(gameSelections).forEach(e=>{const a=gameSelections[e];if(a.winner){const e=currentStandings.find(e=>e.team_id===a.winner_id),n=currentStandings.find(e=>e.team_id===a.loser_id);e&&n&&(e.wins++,n.losses++,"away"===a.winner&&a.away_score&&(e.points_for+=a.away_score),"home"===a.winner&&a.home_score&&(e.points_for+=a.home_score),"away"===a.winner&&a.home_score&&(n.points_for+=a.home_score),"home"===a.winner&&a.away_score&&(n.points_for+=a.away_score))}}),currentStandings.sort((e,a)=>a.wins!==e.wins?a.wins-e.wins:a.points_for-e.points_for),renderStandings()}function renderStandings(){const e=document.getElementById("standings-body");if(!e)return;const a=window.simulatorData.playoff_config.playoff_teams,n=window.simulatorData.playoff_config.bye_teams;let s="";currentStandings.forEach((e,t)=>{const i=t+1;let o="",c="";i<=n?(o="on-bye",c='<span class="status-badge status-bye">\ud83c\udfc6 FIRST ROUND BYE</span>'):i<=a?(o="in-playoffs",c='<span class="status-badge status-playoff">\u2705 PLAYOFFS</span>'):c='<span class="status-badge status-out">\u274c ELIMINATED</span>',s+=`\n            <tr class="${o}">\n                <td><strong style="font-size: 18px;">${i}</strong></td>\n                <td><strong>${e.team_name}</strong></td>\n                <td>${e.wins}-${e.losses}</td>\n                <td>${e.points_for.toFixed(2)}</td>\n                <td>${c}</td>\n            </tr>\n        `}),e.innerHTML=s}function generatePlayoffBracket(){const e=document.getElementById("bracket-container");if(!e)return;const a=window.simulatorData.playoff_config.playoff_teams,n=window.simulatorData.playoff_config.bye_teams,s=currentStandings.slice(0,a),t=s.slice(0,n),i=s.slice(n),o=[{home:i[0],away:i[3]},{home:i[1],away:i[2]}],c=[...t,...[i[0],i[1]]].sort((e,a)=>{return s.findIndex(a=>a.team_id===e.team_id)+1-(s.findIndex(e=>e.team_id===a.team_id)+1)}),d=[{home:c[0],away:c[3]},{home:c[1],away:c[2]}];let r=`\n        <div class="bracket">\n            <div class="bracket-round">\n                <div class="round-title">Wild Card</div>\n                ${o.map(e=>`\n                    <div class="bracket-game">\n                        <div class="bracket-team">\n                            <span><span class="seed-badge">${s.findIndex(a=>a.team_id===e.home.team_id)+1}</span>${e.home.team_name}</span>\n                        </div>\n                        <div class="bracket-team">\n                            <span><span class="seed-badge">${s.findIndex(a=>a.team_id===e.away.team_id)+1}</span>${e.away.team_name}</span>\n                        </div>\n                    </div>\n                `).join("")}\n                <div class="bracket-game">\n                    <div class="bye-indicator">\n                        <span class="seed-badge">1</span>${t[0].team_name}<br>FIRST ROUND BYE\n                    </div>\n                </div>\n                <div class="bracket-game">\n                    <div class="bye-indicator">\n                        <span class="seed-badge">2</span>${t[1].team_name}<br>FIRST ROUND BYE\n                    </div>\n                </div>\n            </div>\n            \n            <div class="bracket-round">\n                <div class="round-title">Semifinals</div>\n                ${d.map(e=>`\n                    <div class="bracket-game">\n                        <div class="bracket-team">\n                            <span><span class="seed-badge">${s.findIndex(a=>a.team_id===e.home.team_id)+1}</span>${e.home.team_name}</span>\n                        </div>\n                        <div class="bracket-team">\n                            <span><span class="seed-badge">${s.findIndex(a=>a.team_id===e.away.team_id)+1}</span>${e.away.team_name}</span>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n            \n            <div class="bracket-round">\n                <div class="round-title">Championship</div>\n                <div class="bracket-game">\n                    <div class="bracket-team">\n                        <span><span class="seed-badge">?</span>TBD</span>\n                    </div>\n                    <div class="bracket-team">\n                        <span><span class="seed-badge">?</span>TBD</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;e.innerHTML=r}function resetSimulator(){gameSelections={},currentStandings=JSON.parse(JSON.stringify(window.simulatorData.current_standings)),renderGameSelections(),updateStandings(),generatePlayoffBracket()}function calculateOptimalProjectedScore(e,a){return window.simulatorData.weekly_optimal_projections&&window.simulatorData.weekly_optimal_projections[a]&&window.simulatorData.weekly_optimal_projections[a][e]?window.simulatorData.weekly_optimal_projections[a][e]:calculateAverageScore(e)}function simulateAllGames(e){const a=window.simulatorData.remaining_games;gameSelections={},a.forEach((a,n)=>{const s=`w${a.week}_${n}`;let t,i,o,c,d;if("random"===e)i="home"===(t=Math.random()>.5?"home":"away")?a.home_id:a.away_id,o="home"===t?a.away_id:a.home_id;else if("favorite"===e){const e=window.simulatorData.current_standings.find(e=>e.team_id===a.home_id),n=window.simulatorData.current_standings.find(e=>e.team_id===a.away_id);i="home"===(t=e.points_for>n.points_for?"home":"away")?a.home_id:a.away_id,o="home"===t?a.away_id:a.home_id}const r=calculateAverageScore(i),l=calculateAverageScore(o);c=r,d=l>r?r-1:l,gameSelections[s]={winner:t,winner_id:i,loser_id:o,away_score:"away"===t?parseFloat(c.toFixed(2)):parseFloat(d.toFixed(2)),home_score:"home"===t?parseFloat(c.toFixed(2)):parseFloat(d.toFixed(2))}}),renderGameSelections(),updateStandings(),generatePlayoffBracket()}let currentStandings=[],gameSelections={},playoffBracket={};